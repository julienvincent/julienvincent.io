/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as PostsIndexRouteImport } from './routes/posts/index'
import { Route as PostsTreesitterLanguageInjectionsRouteImport } from './routes/posts/treesitter-language-injections'
import { Route as PostsTreesitterCodeBlocksRouteImport } from './routes/posts/treesitter-code-blocks'

const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsRoute,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)
const PostsTreesitterLanguageInjectionsRoute =
  PostsTreesitterLanguageInjectionsRouteImport.update({
    id: '/treesitter-language-injections',
    path: '/treesitter-language-injections',
    getParentRoute: () => PostsRoute,
  } as any)
const PostsTreesitterCodeBlocksRoute =
  PostsTreesitterCodeBlocksRouteImport.update({
    id: '/treesitter-code-blocks',
    path: '/treesitter-code-blocks',
    getParentRoute: () => PostsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/posts/treesitter-code-blocks': typeof PostsTreesitterCodeBlocksRoute
  '/posts/treesitter-language-injections': typeof PostsTreesitterLanguageInjectionsRoute
  '/posts/': typeof PostsIndexRoute
  '/projects/': typeof ProjectsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts/treesitter-code-blocks': typeof PostsTreesitterCodeBlocksRoute
  '/posts/treesitter-language-injections': typeof PostsTreesitterLanguageInjectionsRoute
  '/posts': typeof PostsIndexRoute
  '/projects': typeof ProjectsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/posts/treesitter-code-blocks': typeof PostsTreesitterCodeBlocksRoute
  '/posts/treesitter-language-injections': typeof PostsTreesitterLanguageInjectionsRoute
  '/posts/': typeof PostsIndexRoute
  '/projects/': typeof ProjectsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts'
    | '/projects'
    | '/posts/treesitter-code-blocks'
    | '/posts/treesitter-language-injections'
    | '/posts/'
    | '/projects/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/posts/treesitter-code-blocks'
    | '/posts/treesitter-language-injections'
    | '/posts'
    | '/projects'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/projects'
    | '/posts/treesitter-code-blocks'
    | '/posts/treesitter-language-injections'
    | '/posts/'
    | '/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRoute: typeof PostsRouteWithChildren
  ProjectsRoute: typeof ProjectsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRoute
    }
    '/posts/treesitter-language-injections': {
      id: '/posts/treesitter-language-injections'
      path: '/treesitter-language-injections'
      fullPath: '/posts/treesitter-language-injections'
      preLoaderRoute: typeof PostsTreesitterLanguageInjectionsRouteImport
      parentRoute: typeof PostsRoute
    }
    '/posts/treesitter-code-blocks': {
      id: '/posts/treesitter-code-blocks'
      path: '/treesitter-code-blocks'
      fullPath: '/posts/treesitter-code-blocks'
      preLoaderRoute: typeof PostsTreesitterCodeBlocksRouteImport
      parentRoute: typeof PostsRoute
    }
  }
}

interface PostsRouteChildren {
  PostsTreesitterCodeBlocksRoute: typeof PostsTreesitterCodeBlocksRoute
  PostsTreesitterLanguageInjectionsRoute: typeof PostsTreesitterLanguageInjectionsRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsTreesitterCodeBlocksRoute: PostsTreesitterCodeBlocksRoute,
  PostsTreesitterLanguageInjectionsRoute:
    PostsTreesitterLanguageInjectionsRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface ProjectsRouteChildren {
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsIndexRoute: ProjectsIndexRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRoute: PostsRouteWithChildren,
  ProjectsRoute: ProjectsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
